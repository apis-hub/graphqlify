type Asset implements Node, Slug {
  id: ID!
  name: String!
  description: String
  asset_type: String
  asset_data: reusable_data_type
  thumbnail_url: String
  preview_url: String
  tag_names: [String]
  created_at: String
  updated_at: String
  attachments(after: String, first: Int, before: String, last: Int): attachmentConnection
  collections(after: String, first: Int, before: String, last: Int): collectionConnection
  comments: assetCommentsConnection
}

type AssetComments implements Node, Slug {
  id: ID!
  body: String
  created_at: String
  updated_at: String
  assets(after: String, first: Int, before: String, last: Int): assetConnection
  replies(after: String, first: Int, before: String, last: Int): assetCommentsConnection
}

type assetCommentsConnection {
  pageInfo: PageInfo!
  edges: [assetCommentsEdge]
}

type assetCommentsEdge {
  node: AssetComments
  cursor: String!
}

type assetConnection {
  pageInfo: PageInfo!
  edges: [assetEdge]
}

type assetEdge {
  node: Asset
  cursor: String!
}

type Attachment implements Node, Slug {
  id: ID!
  mimetype: String
  extension: String
  asset_id: ID
  filename: String
  size: Int
  file_url: String
  thumbnail_url: String
  preview_url: String
  thumbnailed: Boolean
  position: Int
  width: Int
  height: Int
  metadata: reusable_data_type
  created_at: String!
  updated_at: String!
}

type attachmentConnection {
  pageInfo: PageInfo!
  edges: [attachmentEdge]
}

type attachmentEdge {
  node: Attachment
  cursor: String!
}

type Brandfolder implements Node, Slug {
  id: ID!
  name: String!
  tagline: String
  public: Boolean
  stealth: Boolean
  request_access_enabled: Boolean
  request_access_prompt: String
  slug: String!
  google_analytics_id: ID
  organization_id: ID
  whitelisted_domains: [String]
  enable_simple_password: Boolean
  collections(after: String, first: Int, before: String, last: Int): collectionConnection
  sections(after: String, first: Int, before: String, last: Int): sectionConnection
  social_links(after: String, first: Int, before: String, last: Int): socialLinkConnection
  admins(after: String, first: Int, before: String, last: Int): userConnection
  collaborators(after: String, first: Int, before: String, last: Int): userConnection
  guests(after: String, first: Int, before: String, last: Int): userConnection
  users(after: String, first: Int, before: String, last: Int): userConnection
  user_permissions(after: String, first: Int, before: String, last: Int): userPermissionConnection
  assets(after: String, first: Int, before: String, last: Int): assetConnection
  invitations(after: String, first: Int, before: String, last: Int): invitationConnection
}

type brandfolderConnection {
  pageInfo: PageInfo!
  edges: [brandfolderEdge]
}

type brandfolderEdge {
  node: Brandfolder
  cursor: String!
}

type Collection implements Node, Slug {
  id: ID!
  brandfolder_id: ID
  name: String!
  slug: String!
  public: Boolean
  stealth: Boolean
  options: reusable_data_type
  created_at: String!
  updated_at: String!
  assets(after: String, first: Int, before: String, last: Int): assetConnection
  sections(after: String, first: Int, before: String, last: Int): sectionConnection
  admins(after: String, first: Int, before: String, last: Int): userConnection
  collaborators(after: String, first: Int, before: String, last: Int): userConnection
  guests(after: String, first: Int, before: String, last: Int): userConnection
}

type collectionConnection {
  pageInfo: PageInfo!
  edges: [collectionEdge]
}

type collectionEdge {
  node: Collection
  cursor: String!
}

input createBrandfolderInput {
  name: String!
  organization_id: ID!
  clientMutationId: String!
}

type createBrandfolderPayload {
  brandfolder: Brandfolder
  organization: Organization
  clientMutationId: String!
}

input DeleteBrandfolderInput {
  id: ID!
  clientMutationId: String!
}

type DeleteBrandfolderPayload {
  brandfolderEdge: brandfolderEdge
  clientMutationId: String!
}

type Event implements Node, Slug {
  id: ID!
  user_id: ID
  brandfolder_id: ID
  collection_id: ID
  asset_id: ID
  attachment_id: ID
  invitation_id: ID
  action: String!
  user_agent: String
  ip: String
  lat: Int
  long: Int
  city: String
  state: String
  country: String
  social_link_id: ID
  section_id: ID
  organization_id: ID
  share_manifest_id: ID
  created_at: String
  updated_at: String
}

type Invitation implements Node, Slug {
  id: ID!
  email: String!
  token: String
  inviter_id: ID
  permission_level: String!
  personal_message: String
  active: Boolean
  created_at: String
  updated_at: String
}

type invitationConnection {
  pageInfo: PageInfo!
  edges: [invitationEdge]
}

type invitationEdge {
  node: Invitation
  cursor: String!
}

type Mutation {
  createBrandfolder(input: createBrandfolderInput!): createBrandfolderPayload
  updateBrandfolder(input: updateBrandfolderInput!): updateBrandfolderPayload
  deleteBrandfolder(input: DeleteBrandfolderInput!): DeleteBrandfolderPayload
}

interface Node {
  id: ID!
}

type Organization implements Node, Slug {
  id: ID!
  name: String
  slug: String!
  branded_login_image: String
  created_at: String
  updated_at: String
  brandfolders(after: String, first: Int, before: String, last: Int): brandfolderConnection
  owners(after: String, first: Int, before: String, last: Int): userConnection
  admins(after: String, first: Int, before: String, last: Int): userConnection
  collaborators(after: String, first: Int, before: String, last: Int): userConnection
  guests(after: String, first: Int, before: String, last: Int): userConnection
  users(after: String, first: Int, before: String, last: Int): userConnection
}

type organizationConnection {
  pageInfo: PageInfo!
  edges: [organizationEdge]
}

type organizationEdge {
  node: Organization
  cursor: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  root: Root
  node(id: ID!): Node
  slug(id: ID!): Slug
}

scalar reusable_data_type

type Root {
  url: String
  brandfolders(after: String, first: Int, before: String, last: Int): brandfolderConnection
  organizations(after: String, first: Int, before: String, last: Int): organizationConnection
}

type section implements Node, Slug {
  id: ID!
  name: String!
  default_asset_type: String!
  position: Int
  brandfolder_id: ID
  created_at: String
  updated_at: String
  assets(after: String, first: Int, before: String, last: Int): assetConnection
}

type sectionConnection {
  pageInfo: PageInfo!
  edges: [sectionEdge]
}

type sectionEdge {
  node: section
  cursor: String!
}

interface Slug {
  id: ID!
}

type SocialLink implements Node, Slug {
  id: ID!
  name: String!
  url: String!
  position: Int
  brandfolder_id: ID
  created_at: String
  updated_at: String
}

type socialLinkConnection {
  pageInfo: PageInfo!
  edges: [socialLinkEdge]
}

type socialLinkEdge {
  node: SocialLink
  cursor: String!
}

input updateBrandfolderInput {
  id: ID!
  name: String
  tagline: String
  is_public: Boolean
  stealth: Boolean
  request_access_enabled: Boolean
  request_access_prompt: String
  slug: String
  google_analytics_id: ID
  whitelisted_domains: String
  enable_simple_password: Boolean
  clientMutationId: String!
}

type updateBrandfolderPayload {
  brandfolder: Brandfolder
  clientMutationId: String!
}

type User implements Node, Slug {
  id: ID!
  email: String!
  first_name: String
  last_name: String
  password: String!
  create_at: String
  updated_at: String
  user_permissions(after: String, first: Int, before: String, last: Int): userPermissionConnection
  brandfolders(after: String, first: Int, before: String, last: Int): brandfolderConnection
  organizations(after: String, first: Int, before: String, last: Int): organizationConnection
  collections(after: String, first: Int, before: String, last: Int): collectionConnection
}

type userConnection {
  pageInfo: PageInfo!
  edges: [userEdge]
}

type userEdge {
  node: User
  cursor: String!
}

type UserPermission implements Node, Slug {
  id: ID!
  user_id: ID
  permission_level: String!
  email: String!
  created_at: String
  updated_at: String
}

type userPermissionConnection {
  pageInfo: PageInfo!
  edges: [userPermissionEdge]
}

type userPermissionEdge {
  node: UserPermission
  cursor: String!
}
