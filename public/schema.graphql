type Asset implements Node, Slug {
  id: ID!
  name: String!
  asset_type: String
  thumbnail_url: String
  preview_url: String
  description: String
  asset_data: reusable_data_type
  tag_names: [String]
  created_at: String
  updated_at: String
  attachments(after: String, first: Int, before: String, last: Int): attachmentConnection
  collections(after: String, first: Int, before: String, last: Int): collectionConnection
  comments(after: String, first: Int, before: String, last: Int): assetCommentConnection
}

type AssetComment implements Node, Slug {
  id: ID!
  body: String
  created_at: String
  updated_at: String
  asset(after: String, first: Int, before: String, last: Int): Asset
  replies(after: String, first: Int, before: String, last: Int): assetCommentConnection
}

type assetCommentConnection {
  pageInfo: PageInfo!
  edges: [assetCommentEdge]
}

type assetCommentEdge {
  node: AssetComment
  cursor: String!
}

type assetConnection {
  pageInfo: PageInfo!
  edges: [assetEdge]
}

type assetEdge {
  node: Asset
  cursor: String!
}

type Attachment implements Node, Slug {
  id: ID!
  position: Int
  url: String
  mimetype: String
  extension: String
  filename: String
  size: Int
  file_url: String
  thumbnail_url: String
  preview_url: String
  thumbnailed: Boolean
  width: Int
  height: Int
  metadata: reusable_data_type
  created_at: String!
  updated_at: String!
  asset: Asset
}

type attachmentConnection {
  pageInfo: PageInfo!
  edges: [attachmentEdge]
}

type attachmentEdge {
  node: Attachment
  cursor: String!
}

type Brandfolder implements Node, Slug {
  id: ID!
  name: String!
  slug: String!
  tagline: String
  public: Boolean
  stealth: Boolean
  request_access_enabled: Boolean
  request_access_prompt: String
  whitelisted_domains: [String]
  enable_simple_password: Boolean
  card_image: String
  header_image: String
  google_analytics_id: ID
  created_at: String
  updated_at: String
  organization: Organization
  sections(after: String, first: Int, before: String, last: Int): sectionConnection
  social_links(after: String, first: Int, before: String, last: Int): socialLinkConnection
  collections(after: String, first: Int, before: String, last: Int): collectionConnection
  admins(after: String, first: Int, before: String, last: Int): userConnection
  collaborators(after: String, first: Int, before: String, last: Int): userConnection
  guests(after: String, first: Int, before: String, last: Int): userConnection
  users(after: String, first: Int, before: String, last: Int): userConnection
  user_permissions(after: String, first: Int, before: String, last: Int): userPermissionConnection
  assets(after: String, first: Int, before: String, last: Int): assetConnection
  invitations(after: String, first: Int, before: String, last: Int): invitationConnection
}

type brandfolderConnection {
  pageInfo: PageInfo!
  edges: [brandfolderEdge]
}

type brandfolderEdge {
  node: Brandfolder
  cursor: String!
}

type Collection implements Node, Slug {
  id: ID!
  name: String!
  slug: String!
  public: Boolean
  stealth: Boolean
  options: reusable_data_type
  created_at: String!
  updated_at: String!
  brandfolder: Brandfolder
  assets(after: String, first: Int, before: String, last: Int): assetConnection
  sections(after: String, first: Int, before: String, last: Int): sectionConnection
  admins(after: String, first: Int, before: String, last: Int): userConnection
  collaborators(after: String, first: Int, before: String, last: Int): userConnection
  guests(after: String, first: Int, before: String, last: Int): userConnection
  users(after: String, first: Int, before: String, last: Int): userConnection
  user_permissions(after: String, first: Int, before: String, last: Int): userPermissionConnection
}

type collectionConnection {
  pageInfo: PageInfo!
  edges: [collectionEdge]
}

type collectionEdge {
  node: Collection
  cursor: String!
}

input createAssetCommentInput {
  body: String
  asset_id: ID!
  clientMutationId: String!
}

type createAssetCommentPayload {
  assetComment: AssetComment
  asset: Asset
  clientMutationId: String!
}

input createAssetInput {
  name: String!
  description: String
  asset_data: reusable_data_type
  tag_names: String
  section_id: ID!
  clientMutationId: String!
}

type createAssetPayload {
  asset: Asset
  section: section
  clientMutationId: String!
}

input createAttachmentInput {
  mimetype: String
  extension: String
  filename: String
  size: Int
  url: String
  file_url: String
  thumbnail_url: String
  preview_url: String
  thumbnailed: Boolean
  width: Int
  height: Int
  metadata: reusable_data_type
  asset_id: ID!
  clientMutationId: String!
}

type createAttachmentPayload {
  attachment: Attachment
  asset: Asset
  clientMutationId: String!
}

input createBrandfolderInput {
  name: String!
  organization_id: ID!
  clientMutationId: String!
}

type createBrandfolderPayload {
  brandfolder: Brandfolder
  organization: Organization
  clientMutationId: String!
}

input createBrandfolderUserPermissionInput {
  permission_level: String!
  brandfolder_id: ID!
  clientMutationId: String!
}

type createBrandfolderUserPermissionPayload {
  userPermission: UserPermission
  brandfolder: Brandfolder
  clientMutationId: String!
}

input createCollectionInput {
  name: String!
  slug: String!
  brandfolder_id: ID!
  clientMutationId: String!
}

type createCollectionPayload {
  collection: Collection
  brandfolder: Brandfolder
  clientMutationId: String!
}

input createCollectionUserPermissionInput {
  permission_level: String!
  collection_id: ID!
  clientMutationId: String!
}

type createCollectionUserPermissionPayload {
  userPermission: UserPermission
  collection: Collection
  clientMutationId: String!
}

input createInvitationInput {
  email: String!
  permission_level: String!
  personal_message: String
  inviter_id: ID!
  brandfolder_id: ID!
  clientMutationId: String!
}

type createInvitationPayload {
  invitation: Invitation
  inviter: User
  brandfolder: Brandfolder
  clientMutationId: String!
}

input createOrganizationUserPermissionInput {
  permission_level: String!
  organization_id: ID!
  clientMutationId: String!
}

type createOrganizationUserPermissionPayload {
  userPermission: UserPermission
  organization: Organization
  clientMutationId: String!
}

input createSectionInput {
  name: String!
  default_asset_type: String!
  brandfolder_id: ID!
  clientMutationId: String!
}

type createSectionPayload {
  section: section
  brandfolder: Brandfolder
  clientMutationId: String!
}

input createSocialLinkInput {
  name: String
  url: String!
  brandfolder_id: ID!
  clientMutationId: String!
}

type createSocialLinkPayload {
  socialLink: SocialLink
  brandfolder: Brandfolder
  clientMutationId: String!
}

input createUserInput {
  email: String!
  first_name: String
  last_name: String
  password: String!
  clientMutationId: String!
}

type createUserPayload {
  user: User
  clientMutationId: String!
}

input deleteAssetCommentInput {
  id: ID!
  clientMutationId: String!
}

type deleteAssetCommentPayload {
  deletedId: ID
  clientMutationId: String!
}

input deleteAttachmentInput {
  id: ID!
  clientMutationId: String!
}

type deleteAttachmentPayload {
  deletedId: ID
  clientMutationId: String!
}

input deleteBrandfolderInput {
  id: ID!
  clientMutationId: String!
}

type deleteBrandfolderPayload {
  deletedId: ID
  clientMutationId: String!
}

input deleteCollectionInput {
  id: ID!
  clientMutationId: String!
}

type deleteCollectionPayload {
  deletedId: ID
  clientMutationId: String!
}

input deleteInvitationInput {
  id: ID!
  clientMutationId: String!
}

type deleteInvitationPayload {
  deletedId: ID
  clientMutationId: String!
}

input deleteSectionInput {
  id: ID!
  clientMutationId: String!
}

type deleteSectionPayload {
  deletedId: ID
  clientMutationId: String!
}

input deleteSocialLinkInput {
  id: ID!
  clientMutationId: String!
}

type deleteSocialLinkPayload {
  deletedId: ID
  clientMutationId: String!
}

input deleteUserInput {
  id: ID!
  clientMutationId: String!
}

type deleteUserPayload {
  deletedId: ID
  clientMutationId: String!
}

type Invitation implements Node, Slug {
  id: ID!
  email: String!
  permission_level: String!
  personal_message: String
  token: String
  active: Boolean
  created_at: String
  updated_at: String
  inviter: User
}

type invitationConnection {
  pageInfo: PageInfo!
  edges: [invitationEdge]
}

type invitationEdge {
  node: Invitation
  cursor: String!
}

type Mutation {
  createBrandfolder(input: createBrandfolderInput!): createBrandfolderPayload
  updateBrandfolder(input: updateBrandfolderInput!): updateBrandfolderPayload
  deleteBrandfolder(input: deleteBrandfolderInput!): deleteBrandfolderPayload
  createAssetComment(input: createAssetCommentInput!): createAssetCommentPayload
  deleteAssetComment(input: deleteAssetCommentInput!): deleteAssetCommentPayload
  createAsset(input: createAssetInput!): createAssetPayload
  updateAsset(input: updateAssetInput!): updateAssetPayload
  removeSectionAsset(input: removeSectionAssetsInput!): removeSectionAssetsPayload
  createAttachment(input: createAttachmentInput!): createAttachmentPayload
  updateAttachment(input: updateAttachmentInput!): updateAttachmentPayload
  deleteAttachment(input: deleteAttachmentInput!): deleteAttachmentPayload
  createCollection(input: createCollectionInput!): createCollectionPayload
  updateCollection(input: updateCollectionInput!): updateCollectionPayload
  deleteCollection(input: deleteCollectionInput!): deleteCollectionPayload
  createInvitation(input: createInvitationInput!): createInvitationPayload
  deleteInvitation(input: deleteInvitationInput!): deleteInvitationPayload
  createSocialLink(input: createSocialLinkInput!): createSocialLinkPayload
  updateSocialLink(input: updateSocialLinkInput!): updateSocialLinkPayload
  deleteSocialLink(input: deleteSocialLinkInput!): deleteSocialLinkPayload
  updateOrganization(input: updateOrganizationInput!): updateOrganizationPayload
  createSection(input: createSectionInput!): createSectionPayload
  updateSection(input: updateSectionInput!): updateSectionPayload
  deleteSection(input: deleteSectionInput!): deleteSectionPayload
  createUser(input: createUserInput!): createUserPayload
  updateUser(input: updateUserInput!): updateUserPayload
  deleteUser(input: deleteUserInput!): deleteUserPayload
  createBrandfolderUserPermission(input: createBrandfolderUserPermissionInput!): createBrandfolderUserPermissionPayload
  createCollectionUserPermission(input: createCollectionUserPermissionInput!): createCollectionUserPermissionPayload
  createOrganizationUserPermission(input: createOrganizationUserPermissionInput!): createOrganizationUserPermissionPayload
}

interface Node {
  id: ID!
}

type Organization implements Node, Slug {
  id: ID!
  name: String
  slug: String!
  branded_login_image: String
  created_at: String
  updated_at: String
  brandfolders(after: String, first: Int, before: String, last: Int): brandfolderConnection
  owners(after: String, first: Int, before: String, last: Int): userConnection
  admins(after: String, first: Int, before: String, last: Int): userConnection
  collaborators(after: String, first: Int, before: String, last: Int): userConnection
  guests(after: String, first: Int, before: String, last: Int): userConnection
  users(after: String, first: Int, before: String, last: Int): userConnection
  user_permissions(after: String, first: Int, before: String, last: Int): userPermissionConnection
}

type organizationConnection {
  pageInfo: PageInfo!
  edges: [organizationEdge]
}

type organizationEdge {
  node: Organization
  cursor: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  root: Root
  node(id: ID!): Node
  slug(id: ID!): Slug
}

input removeSectionAssetsInput {
  section_id: ID!
  clientMutationId: String!
}

type removeSectionAssetsPayload {
  section: section
  clientMutationId: String!
}

scalar reusable_data_type

type Root {
  url: String
  brandfolders(after: String, first: Int, before: String, last: Int): brandfolderConnection
  organizations(after: String, first: Int, before: String, last: Int): organizationConnection
}

type section implements Node, Slug {
  id: ID!
  name: String!
  default_asset_type: String!
  position: Int
  created_at: String
  updated_at: String
  brandfolder: Brandfolder
  assets(after: String, first: Int, before: String, last: Int): assetConnection
}

type sectionConnection {
  pageInfo: PageInfo!
  edges: [sectionEdge]
}

type sectionEdge {
  node: section
  cursor: String!
}

interface Slug {
  id: ID!
}

type SocialLink implements Node, Slug {
  id: ID!
  name: String!
  url: String!
  position: Int
  created_at: String
  updated_at: String
  brandfolder: Brandfolder
}

type socialLinkConnection {
  pageInfo: PageInfo!
  edges: [socialLinkEdge]
}

type socialLinkEdge {
  node: SocialLink
  cursor: String!
}

input updateAssetInput {
  id: ID!
  description: String
  asset_data: reusable_data_type
  tag_names: String
  clientMutationId: String!
}

type updateAssetPayload {
  asset: Asset
  clientMutationId: String!
}

input updateAttachmentInput {
  id: ID!
  position: Int
  url: String
  clientMutationId: String!
}

type updateAttachmentPayload {
  attachment: Attachment
  clientMutationId: String!
}

input updateBrandfolderInput {
  id: ID!
  name: String
  tagline: String
  is_public: Boolean
  stealth: Boolean
  request_access_enabled: Boolean
  request_access_prompt: String
  slug: String
  google_analytics_id: ID
  whitelisted_domains: String
  enable_simple_password: Boolean
  clientMutationId: String!
}

type updateBrandfolderPayload {
  brandfolder: Brandfolder
  clientMutationId: String!
}

input updateCollectionInput {
  id: ID!
  name: String
  slug: String
  is_public: Boolean
  stealth: Boolean
  options: reusable_data_type
  clientMutationId: String!
}

type updateCollectionPayload {
  collection: Collection
  clientMutationId: String!
}

input updateOrganizationInput {
  id: ID!
  name: String
  slug: String
  clientMutationId: String!
}

type updateOrganizationPayload {
  organization: Organization
  clientMutationId: String!
}

input updateSectionInput {
  id: ID!
  name: String
  default_asset_type: String
  position: Int
  clientMutationId: String!
}

type updateSectionPayload {
  section: section
  clientMutationId: String!
}

input updateSocialLinkInput {
  id: ID!
  name: String
  url: String
  position: Int
  clientMutationId: String!
}

type updateSocialLinkPayload {
  socialLink: SocialLink
  clientMutationId: String!
}

input updateUserInput {
  id: ID!
  email: String
  first_name: String
  last_name: String
  password: String
  clientMutationId: String!
}

type updateUserPayload {
  user: User
  clientMutationId: String!
}

type User implements Node, Slug {
  id: ID!
  first_name: String
  last_name: String
  email: String!
  password: String!
  create_at: String
  updated_at: String
  brandfolders(after: String, first: Int, before: String, last: Int): brandfolderConnection
  organizations(after: String, first: Int, before: String, last: Int): organizationConnection
  collections(after: String, first: Int, before: String, last: Int): collectionConnection
}

type userConnection {
  pageInfo: PageInfo!
  edges: [userEdge]
}

type userEdge {
  node: User
  cursor: String!
}

type UserPermission implements Node, Slug {
  id: ID!
  permission_level: String!
  email: String!
  created_at: String
  updated_at: String
  user: User
}

type userPermissionConnection {
  pageInfo: PageInfo!
  edges: [userPermissionEdge]
}

type userPermissionEdge {
  node: UserPermission
  cursor: String!
}
